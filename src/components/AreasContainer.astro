---
// AreasContainer.astro
import CursoCard from "./CursoCard.astro";
import Btn from "./Btn.astro";
import Search from "./Search.astro";

import { slugReplace } from "../func/slugURL";
import {
  tipoCursoColores,
} from "../func/AsignarColorTipoCursos";

const areas = Astro.props.areas; // Se espera que se le pase un array de áreas (cursosPorArea)

---

<div id="areas" class="areas-container">
  <div class="search-container">
    <Search id="area-search" />
  </div>

  <div class="buttons-container">
    {
      Object.entries(tipoCursoColores).map(([tipo, color]) => (
        <Btn
          text={tipo.toUpperCase()}
          backgroundColor={color}
          fontSize="20px"
          id={tipo}
        />
      ))
    }
  </div>

  <div class="card-container">
    {Object.entries(areas).map(([area, tipos]) => (
      <CursoCard
        nombreCurso={area}
        tipoCurso={tipos}
        link={`/cursos/area/${slugReplace(area)}#cursos`}
      />
    ))}
  </div>
</div>

<style>
  .areas-container {
    background-color: #062c5b;
    padding-top: 4%;
    padding: 40px;
  }

  .buttons-container {
    display: flex;
    justify-content: center;
    gap: 2%;
    margin-bottom: 4%;
  }

  .card-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    padding: 0 15% 5% 15%;
  }

  .search-container {
    display: flex;
    justify-content: center;
    margin-bottom: 2%;
  }

  .area-card {
    background-color: #fff;
    color: #062c5b;
    padding: 20px;
    border-radius: 8px;
    text-align: center;
  }

  @media (max-width: 800px) {
  .buttons-container {
    flex-direction: column; /* Alinea los botones en una columna */
    align-items: center; /* Centra los botones horizontalmente */
    gap: 10px; /* Ajusta el espacio entre los botones */
  }
}
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const areaCards = document.querySelectorAll(".curso-card");

    const searchInput = document.getElementById(
      "area-search"
    ) as HTMLInputElement;

    searchInput?.addEventListener("input", function () {
      const query = this.value.toLowerCase();
      filterAreasByName(areaCards, query);
    });

    // Selecciona todos los botones basados en el id dinámico que estás usando
    const tipos = ["Sincrónico", "Asincrónico", "Presencial", "Todos"];

    tipos.forEach((tipo) => {
      const button = document.getElementById(tipo);
      if (button) {
        button.addEventListener("click", function () {
          filterCourses(areaCards, tipo);
        });
      }
    });
  });

  // Filtra los cursos en función del tipo seleccionado
  function filterCourses(cards: any, tipoSeleccionado: string) {

    const btnTipo = document.getElementById(tipoSeleccionado);
    if (btnTipo) {
      const backgroundColor = btnTipo.style.backgroundColor; // Obtiene el background-color del estilo en línea
      console.log(backgroundColor); // Verifica el valor en la consola

    }

  cards.forEach((card: any) => {
    const tipoCurso = card.getAttribute("data-tipo") || "";

    // Verificar si el tipoCurso contiene alguno de los valores de data tipo
    if (tipoCurso.includes(tipoSeleccionado) || tipoSeleccionado === "Todos") {
      card.style.display = "flex";
    } else {
      card.style.display = "none";
    }
  });
}


  // Filtra las áreas en función del nombre
  function filterAreasByName(areaCards: any, query: string) {
    areaCards.forEach((card: any) => {
      const nombreArea = card.querySelector("p")?.textContent?.toLowerCase();
      if (nombreArea?.includes(query)) {
        card.style.display = "flex";
      } else {
        card.style.display = "none";
      }
    });
  }
</script>
